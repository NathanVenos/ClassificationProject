{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis: Random Forest for Profitability\n",
    "\n",
    "Goal: Use random forest to create a model for the profitability binary-class feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as PD\n",
    "import numpy as NP\n",
    "\n",
    "import sklearn.preprocessing as PP\n",
    "import imblearn.pipeline as PL\n",
    "import sklearn.model_selection as MS\n",
    "import imblearn.under_sampling as US\n",
    "import imblearn.over_sampling as OS\n",
    "\n",
    "import sklearn.tree as TR\n",
    "import sklearn.ensemble as ES \n",
    "\n",
    "import sklearn.metrics as MT     # roc_auc_score, roc_curve, auc\n",
    "\n",
    "import matplotlib.pyplot as MP\n",
    "import seaborn as SB\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('../')\n",
    "import plot_confusion_matrix as pcm;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = 'all'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare Target & Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>set_no</th>\n",
       "      <th>name</th>\n",
       "      <th>price_store</th>\n",
       "      <th>price_used</th>\n",
       "      <th>year</th>\n",
       "      <th>volume</th>\n",
       "      <th>weight</th>\n",
       "      <th>number_parts</th>\n",
       "      <th>total_parts</th>\n",
       "      <th>number_spare_parts</th>\n",
       "      <th>...</th>\n",
       "      <th>windscreens_and_fuselage_tot_prts</th>\n",
       "      <th>znap_tot_prts</th>\n",
       "      <th>category</th>\n",
       "      <th>scolor_1st</th>\n",
       "      <th>scolor_2nd</th>\n",
       "      <th>popularity</th>\n",
       "      <th>aftermarket</th>\n",
       "      <th>adj_store_price</th>\n",
       "      <th>adj_aftermarket</th>\n",
       "      <th>profitable</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15-1</td>\n",
       "      <td>Castle Minifigures</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Historical</td>\n",
       "      <td>Gray</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>105-1</td>\n",
       "      <td>Mail Van</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34</td>\n",
       "      <td>65</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Modern-Town</td>\n",
       "      <td>Red</td>\n",
       "      <td>White</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3639-1</td>\n",
       "      <td>Paddy Wagon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Bigfig-Junior</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3664-1</td>\n",
       "      <td>Bertie Bulldog (Police Chief) and Constable Bu...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Bigfig-Junior</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Red</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3670-1</td>\n",
       "      <td>Service Station</td>\n",
       "      <td>20.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Bigfig-Junior</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Red</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0</td>\n",
       "      <td>49.62</td>\n",
       "      <td>4.38</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 134 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   set_no                                               name  price_store  \\\n",
       "0    15-1                                 Castle Minifigures          NaN   \n",
       "1   105-1                                           Mail Van          NaN   \n",
       "2  3639-1                                        Paddy Wagon          NaN   \n",
       "3  3664-1  Bertie Bulldog (Police Chief) and Constable Bu...          NaN   \n",
       "4  3670-1                                    Service Station         20.0   \n",
       "\n",
       "   price_used  year  volume  weight  number_parts  total_parts  \\\n",
       "0        63.0  1984     NaN     NaN            16           38   \n",
       "1       102.0  1984     NaN     NaN            34           65   \n",
       "2        14.0  1984     NaN     NaN            11           12   \n",
       "3        31.0  1984     NaN     NaN            24           63   \n",
       "4        54.0  1984     NaN     NaN            30           54   \n",
       "\n",
       "   number_spare_parts  ...  windscreens_and_fuselage_tot_prts  znap_tot_prts  \\\n",
       "0                   0  ...                                  0              0   \n",
       "1                   0  ...                                  1              0   \n",
       "2                   0  ...                                  0              0   \n",
       "3                   0  ...                                  0              0   \n",
       "4                   0  ...                                  0              0   \n",
       "\n",
       "        category  scolor_1st  scolor_2nd  popularity  aftermarket  \\\n",
       "0     Historical        Gray       Black         NaN          NaN   \n",
       "1    Modern-Town         Red       White         4.0          NaN   \n",
       "2  Bigfig-Junior        Blue       Black         NaN          NaN   \n",
       "3  Bigfig-Junior        Blue         Red         5.0          NaN   \n",
       "4  Bigfig-Junior      Yellow         Red         NaN         34.0   \n",
       "\n",
       "   adj_store_price  adj_aftermarket  profitable  \n",
       "0              NaN              NaN         NaN  \n",
       "1              NaN              NaN         NaN  \n",
       "2              NaN              NaN         NaN  \n",
       "3              NaN              NaN         NaN  \n",
       "4            49.62             4.38         1.0  \n",
       "\n",
       "[5 rows x 134 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4922 entries, 0 to 4921\n",
      "Columns: 134 entries, set_no to profitable\n",
      "dtypes: float64(9), int64(120), object(5)\n",
      "memory usage: 5.0+ MB\n"
     ]
    }
   ],
   "source": [
    "FEATURE_FILE = '../data/merge_feature.csv'\n",
    "full_df = PD.read_csv(FEATURE_FILE)\n",
    "full_df.head()\n",
    "full_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop volume and weight since they are sparse and colinear\n",
    "\n",
    "full_df = full_df.drop(columns=['volume', 'weight'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop total_parts and number_parts since they are colinear with the parts category features\n",
    "\n",
    "full_df = full_df.drop(columns=['total_parts', 'number_parts'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3832, 130)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter out rows without profitable feature\n",
    "\n",
    "full_df = full_df.loc[full_df['profitable'].isna()==False]\n",
    "full_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3831, 130)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter out rows without colors\n",
    "\n",
    "full_df = full_df.loc[ (full_df['scolor_1st'].isna()==False) | (full_df['scolor_2nd'].isna()==False) ]\n",
    "full_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3831,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# target series\n",
    "\n",
    "target_sr = full_df['profitable']\n",
    "target_sr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3831, 149)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Index(['windows_and_doors_cnt_prts', 'znap_cnt_prts',\n",
       "       'supports_girders_and_cranes_tot_prts', 'pneumatics_cnt_prts',\n",
       "       'tools_tot_prts', 'bricks_round_and_cones_tot_prts', 'bricks_cnt_prts',\n",
       "       'windscreens_and_fuselage_cnt_prts', 'technic_connectors_cnt_prts',\n",
       "       'bars_ladders_and_fences_cnt_prts',\n",
       "       ...\n",
       "       'scolor_1st_Yellow', 'scolor_2nd_Blue', 'scolor_2nd_Brown',\n",
       "       'scolor_2nd_Gray', 'scolor_2nd_Green', 'scolor_2nd_Red',\n",
       "       'scolor_2nd_Tan', 'scolor_2nd_Transparent', 'scolor_2nd_White',\n",
       "       'scolor_2nd_Yellow'],\n",
       "      dtype='object', length=149)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# feature dataframe with one-hot encoding\n",
    "\n",
    "columns_st = set(full_df.columns)\n",
    "drop_st = set(['set_no', 'name', 'price_store', 'price_used', 'aftermarket', 'popularity', \n",
    "               'adj_store_price', 'adj_aftermarket', 'profitable'])\n",
    "feature_st = columns_st.difference(drop_st)\n",
    "\n",
    "feature_cat_df = full_df[list(feature_st)]\n",
    "\n",
    "feature_df = PD.get_dummies(feature_cat_df, drop_first= True, \n",
    "               columns=['category', 'scolor_1st', 'scolor_2nd'])\n",
    "feature_df.shape\n",
    "feature_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split Test & Standardize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "TEST_SPLIT = 0.2\n",
    "SEED = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3064,)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(767,)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(3064, 149)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(767, 149)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train, y_test, X_train, X_test = MS.train_test_split(target_sr, feature_df, \n",
    "                                                       stratify=feature_df['year'], \n",
    "                                                       test_size=TEST_SPLIT, random_state=SEED)\n",
    "\n",
    "y_train.shape\n",
    "y_test.shape \n",
    "X_train.shape\n",
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler(copy=True, with_mean=True, with_std=True)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(149,)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fit the scalers based on the training set\n",
    "# must include all features, including one-hot encoded ones\n",
    "# target variable does not need to be transformed\n",
    "\n",
    "scaler = PP.StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "scaler.mean_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3064, 149)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create standardized feature sets\n",
    "\n",
    "X_train_std = scaler.transform(X_train)\n",
    "X_test_std = scaler.transform(X_test)\n",
    "\n",
    "X_train_std.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# setup for several algorithms\n",
    "\n",
    "ESTIMATORS = 1000\n",
    "algorithm_ls = []\n",
    "alpha_ls = [1e-3, 1e-2, 1e-1, 1, 1e1, 1e2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.9983681462140992"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# standalone \n",
    "\n",
    "dtc = TR.DecisionTreeClassifier()\n",
    "dtc.fit(X_train_std, y_train)\n",
    "dtc.score(X_train_std, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([0.16084599, 0.11061716, 0.10486197, 0.11776781, 0.08438897]),\n",
       " 'score_time': array([0.00370908, 0.00254583, 0.00329924, 0.00253701, 0.00248599]),\n",
       " 'test_score': array([0.72964169, 0.69983687, 0.72104405, 0.7254902 , 0.67810458]),\n",
       " 'train_score': array([0.99877551, 0.99836801, 0.99836801, 0.99877651, 0.99796085])}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use cross validation to evaluate algorithm\n",
    "\n",
    "scaler = PP.StandardScaler()\n",
    "decisiontree = TR.DecisionTreeClassifier()\n",
    "pipeline = PL.Pipeline([('transformer', scaler), ('estimator', decisiontree)])\n",
    "\n",
    "cv_results = MS.cross_validate(pipeline, X_train, y_train, cv=5, return_train_score=True)\n",
    "cv_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'decision-tree',\n",
       " 'cvtrain_score': 0.9984497787150506,\n",
       " 'cvtrain_error': 0.0003050501182839549,\n",
       " 'cvtest_score': 0.7108234757185745,\n",
       " 'cvtest_error': 0.019312845850772586}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_dx = {\n",
    "    'type': 'decision-tree',\n",
    "    #'lambda': NP.min(alpha_ls) - 0.5 *NP.min(alpha_ls), \n",
    "    'cvtrain_score': cv_results['train_score'].mean(),\n",
    "    'cvtrain_error': cv_results['train_score'].std(),\n",
    "    'cvtest_score': cv_results['test_score'].mean(),\n",
    "    'cvtest_error': cv_results['test_score'].std(),\n",
    "}\n",
    "algorithm_ls.append(new_dx)\n",
    "new_dx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest with Imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.9983681462140992"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# standalone \n",
    "\n",
    "randforest = ES.RandomForestClassifier(n_estimators=ESTIMATORS)\n",
    "randforest.fit(X_train_std, y_train)\n",
    "randforest.score(X_train_std, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([5.18947506, 5.09217   , 5.74222779, 5.10989594, 5.08309507]),\n",
       " 'score_time': array([0.15652084, 0.15642071, 0.16696405, 0.16167402, 0.18106294]),\n",
       " 'test_score': array([0.81433225, 0.80750408, 0.78466558, 0.79084967, 0.76633987]),\n",
       " 'train_score': array([0.99877551, 0.99836801, 0.99836801, 0.99877651, 0.99796085])}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use cross validation to evaluate algorithm\n",
    "\n",
    "scaler = PP.StandardScaler()\n",
    "randforest = ES.RandomForestClassifier(n_estimators=ESTIMATORS)\n",
    "pipeline = PL.Pipeline([('transformer', scaler), ('estimator', randforest)])\n",
    "\n",
    "cv_results = MS.cross_validate(pipeline, X_train, y_train, cv=5, return_train_score=True)\n",
    "cv_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'type': 'random-f',\n",
       " 'cvtrain_score': 0.9984497787150506,\n",
       " 'cvtrain_error': 0.0003050501182839549,\n",
       " 'cvtest_score': 0.792738289492635,\n",
       " 'cvtest_error': 0.017029032021957918}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_dx = {\n",
    "    'type': 'random-f',\n",
    "    #'lambda': NP.min(alpha_ls) - 0.5 *NP.min(alpha_ls), \n",
    "    'cvtrain_score': cv_results['train_score'].mean(),\n",
    "    'cvtrain_error': cv_results['train_score'].std(),\n",
    "    'cvtest_score': cv_results['test_score'].mean(),\n",
    "    'cvtest_error': cv_results['test_score'].std(),\n",
    "}\n",
    "new_dx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.96      , 0.04      ],\n",
       "       [0.78633333, 0.21366667],\n",
       "       [0.591     , 0.409     ],\n",
       "       ...,\n",
       "       [0.818     , 0.182     ],\n",
       "       [0.68      , 0.32      ],\n",
       "       [0.551     , 0.449     ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use cross validation to get test results for ROC curve\n",
    "\n",
    "scaler = PP.StandardScaler()\n",
    "randforest = ES.RandomForestClassifier(n_estimators=ESTIMATORS)\n",
    "pipeline = PL.Pipeline([('transformer', scaler), ('estimator', randforest)])\n",
    "\n",
    "predict_imbal = MS.cross_val_predict(pipeline, X_train, y_train, cv=5, method='predict_proba')\n",
    "predict_imbal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(868,)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(868,)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the TP, FP, and thresholds rates for ROC \n",
    "\n",
    "fpr_imbal, tpr_imbal, thresh_imbal = MT.roc_curve(y_train, predict_imbal[:,1])\n",
    "tpr_imbal.shape\n",
    "fpr_imbal.shape\n",
    "type(thresh_imbal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8080194410692588, 0.37667071688942894, 0.06318347509113001]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[0.32173136992414103, 0.051316376617581434, 0.006693440428380187]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the Roc values for some benchmark thresholds\n",
    "# use >= to threshold because actual thrshold value may not exist\n",
    "\n",
    "thresh25_idx = NP.where(thresh_imbal >= 0.25)\n",
    "thresh50_idx = NP.where(thresh_imbal >= 0.50)\n",
    "thresh75_idx = NP.where(thresh_imbal >= 0.75)\n",
    "\n",
    "thresh_tpr_imbal = [ tpr_imbal[thresh25_idx][-1], tpr_imbal[thresh50_idx][-1], tpr_imbal[thresh75_idx][-1] ]\n",
    "thresh_fpr_imbal = [ fpr_imbal[thresh25_idx][-1], fpr_imbal[thresh50_idx][-1], fpr_imbal[thresh75_idx][-1] ]\n",
    "\n",
    "thresh_tpr_imbal \n",
    "thresh_fpr_imbal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest with Undersampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1646, 149)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(1646,)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# after splitting, balance the dataset\n",
    "\n",
    "undersampler = US.RandomUnderSampler()\n",
    "X_under, y_under = undersampler.fit_resample(X_train, y_train)\n",
    "X_under.shape\n",
    "y_under.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.831, 0.169],\n",
       "       [0.677, 0.323],\n",
       "       [0.33 , 0.67 ],\n",
       "       ...,\n",
       "       [0.647, 0.353],\n",
       "       [0.666, 0.334],\n",
       "       [0.411, 0.589]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use cross validation to get test results for ROC curve\n",
    "\n",
    "sampler = US.RandomUnderSampler()\n",
    "scaler = PP.StandardScaler()\n",
    "randforest = ES.RandomForestClassifier(n_estimators=ESTIMATORS)\n",
    "pipeline = PL.Pipeline([('sampler', sampler), ('transformer', scaler), ('estimator', randforest)])\n",
    "\n",
    "predict_under = MS.cross_val_predict(pipeline, X_train, y_train, cv=5, method='predict_proba')\n",
    "predict_under"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(883,)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(883,)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the TP, FP, and thresholds rates for ROC \n",
    "\n",
    "fpr_under, tpr_under, thresh_under = MT.roc_curve(y_train, predict_under[:,1])\n",
    "tpr_under.shape\n",
    "fpr_under.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9756986634264885, 0.6962332928311057, 0.26123936816524906]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[0.8125836680053548, 0.2458723784024989, 0.03391343150379295]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the Roc values for some benchmark thresholds\n",
    "# use >= to threshold because actual thrshold value may not exist\n",
    "\n",
    "thresh25_idx = NP.where(thresh_under >= 0.25)\n",
    "thresh50_idx = NP.where(thresh_under >= 0.50)\n",
    "thresh75_idx = NP.where(thresh_under >= 0.75)\n",
    "\n",
    "thresh_tpr_under = [ tpr_under[thresh25_idx][-1], tpr_under[thresh50_idx][-1], tpr_under[thresh75_idx][-1] ]\n",
    "thresh_fpr_under = [ fpr_under[thresh25_idx][-1], fpr_under[thresh50_idx][-1], fpr_under[thresh75_idx][-1] ]\n",
    "\n",
    "thresh_tpr_under \n",
    "thresh_fpr_under"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest with SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.937, 0.063],\n",
       "       [0.699, 0.301],\n",
       "       [0.47 , 0.53 ],\n",
       "       ...,\n",
       "       [0.614, 0.386],\n",
       "       [0.688, 0.312],\n",
       "       [0.47 , 0.53 ]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use cross validation to get test results for ROC curve\n",
    "\n",
    "sampler = OS.SMOTE()\n",
    "scaler = PP.StandardScaler()\n",
    "randforest = ES.RandomForestClassifier(n_estimators=ESTIMATORS)\n",
    "pipeline = PL.Pipeline([('sampler', sampler), ('transformer', scaler), ('estimator', randforest)])\n",
    "\n",
    "predict_over = MS.cross_val_predict(pipeline, X_train, y_train, cv=5, method='predict_proba')\n",
    "predict_over"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(916,)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(916,)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the TP, FP, and thresholds rates for ROC \n",
    "\n",
    "fpr_over, tpr_over, thresh_over = MT.roc_curve(y_train, predict_over[:,1])\n",
    "tpr_over.shape\n",
    "fpr_over.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9100850546780073, 0.5419198055893074, 0.16646415552855406]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[0.5310129406514948, 0.11200356983489514, 0.015618027666220438]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the Roc values for some benchmark thresholds\n",
    "# use >= to threshold because actual thrshold value may not exist\n",
    "\n",
    "thresh25_idx = NP.where(thresh_over >= 0.25)\n",
    "thresh50_idx = NP.where(thresh_over >= 0.50)\n",
    "thresh75_idx = NP.where(thresh_over >= 0.75)\n",
    "\n",
    "thresh_tpr_over = [ tpr_over[thresh25_idx][-1], tpr_over[thresh50_idx][-1], tpr_over[thresh75_idx][-1] ]\n",
    "thresh_fpr_over = [ fpr_over[thresh25_idx][-1], fpr_over[thresh50_idx][-1], fpr_over[thresh75_idx][-1] ]\n",
    "\n",
    "thresh_tpr_over \n",
    "thresh_fpr_over"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compare Balances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "IMBAL_COLOR = 'green'\n",
    "UNDER_COLOR = 'orange'\n",
    "OVER_COLOR = 'red'\n",
    "SMOTE_COLOR = 'blue'\n",
    "thresh_ls = ['0.25', '0.50', '0.75']\n",
    "\n",
    "def label_point(x, y, labels, ax, color):\n",
    "    x_sr = PD.Series(x)\n",
    "    y_sr = PD.Series(y)\n",
    "    label_sr = PD.Series(labels)\n",
    "    a = PD.concat({'x': x_sr, 'y': y_sr, 'labels': label_sr}, axis=1)\n",
    "    for i, point in a.iterrows():\n",
    "        ax.text(point['x']+.02, point['y'], str(point['labels']), color=color)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAApkAAAHwCAYAAADtvHRdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nOzdeVxU1f/H8dcMu4CyKCKC4K64ZuCaaykuaZpmaWV8tczSsvplWbZv9i1Ly8qtUlPTzHLJLTHXXLHQ1FBwQQQXRAUEZZ35/XG/oeSSGjAI7+fjwcOZe8+987lTybtz7znHZLVarYiIiIiIFCKzrQsQERERkdJHIVNERERECp1CpoiIiIgUOoVMERERESl0CpkiIiIiUugUMkVERESk0ClkikiZs27dOvz9/W1dhohIqaaQKSIlQlBQEC4uLri5ueHr60t4eDjp6em2LutfM5lMuLq64ubmhpubGx4eHsX6+dcTqMPDw3F0dMTNzQ0vLy86d+7Mvn37CrRJSEjgwQcfxNvbG1dXV5o3b87SpUsLtLFarXz66ac0bNgQV1dX/P39ue+++9i9e3ehX5eIlHwKmSJSYvz000+kp6ezc+dOoqKiGDt2rK1LKhS7du0iPT2d9PR0UlJSbvj43NzcIqiqoBdeeIH09HQSExOpWrUqQ4YMyd935swZ7rjjDhwdHdm7dy/Jyck8++yzDBw4kAULFuS3GzlyJJ988gmffvopZ86cISYmht69e7Ns2bIir19ESh6FTBEpcXx9fQkLC2Pnzp3525YtW8Ztt91G+fLlCQgI4I033sjfFxcXh8lkYubMmVSrVo2KFSvy7rvv5u+/cOEC4eHheHp6EhwcTGRkZIHPi46OpkOHDnh4eNCgQQOWLFmSvy88PJwnn3ySbt264ebmRps2bThx4gTPPPMMnp6e1KtXj6ioqJu6zmnTplGrVi28vLzo1asXx44dy99nMpn4/PPPqV27NrVr1wZg3759dO7cGS8vL+rWrcv8+fPz2y9fvpzg4GDc3d2pWrUq48aNIyMjg27dunHs2LH8ntRLP+NKXFxc6N+/f4Hvfvz48bi5ufHVV1/h6+uLi4sLAwYMYMyYMfzf//0fVquV2NhYPv/8c+bOnUunTp1wcnKiXLlyPPjgg4wePfqmvh8RubUpZIpIiZOQkMCKFSuoVatW/jZXV1e++eYbUlJSWLZsGZMmTWLRokUFjvv111/Zv38/v/zyC2+99RbR0dEAvPnmmxw8eJCDBw/y888/M3PmzPxjcnJy6NmzJ126dCEpKYmJEyfy4IMPsn///vw28+fP55133iE5ORknJydatWpFs2bNSE5Opl+/fjz33HM3fI1r1qzhpZdeYv78+Rw/fpzAwEAeeOCBAm0WLVrEtm3b+PPPP8nIyKBz584MHDiQpKQk5s6dy5NPPsnevXsBGDJkCFOmTOHcuXPs2bOHTp064erqyooVK/Dz88vvSfXz87tmXRkZGcydO7fAdx8REUHfvn0xmwv+yujfvz/x8fHExMTwyy+/4O/vT/PmzW/4uxCR0kkhU0RKjN69e+Pu7k5AQAA+Pj68+eab+fs6dOhAo0aNMJvNNG7cmAEDBrB+/foCx7/++uu4uLjQpEkTmjRpwq5duwAjJI4ZMwYvLy8CAgJ4+umn84/ZunUr6enpjB49GkdHRzp16sTdd9/N3Llz89v06dOH22+/HWdnZ/r06YOzszODBg3Czs6O+++//x97Mps1a4aHhwceHh75nz1nzhwGDx5Ms2bNcHJyYuzYsWzZsoW4uLj841566SW8vLxwcXFh6dKlBAUF8Z///Ad7e3uaNWtG3759829XOzg48Oeff5KWloanpyfNmjW7oe9+3LhxeHh44O7uzq+//sqsWbPy9yUnJ1OlSpXLjvlrW3JyMqdPn75iGxEpuxQyRaTEWLRoEefOnWPdunXs27eP5OTk/H3btm2jY8eOVKpUiQoVKjB58uQC+8G4zf6XcuXK5Q8cOnbsGAEBAfn7AgMD81//te/SXrrAwEASExPz31euXDn/tYuLy2Xv/2mA0u+//05KSgopKSl8+umn+Z97aR1ubm54e3sX+NxLaz5y5Ajbtm3LD6seHh7MmTOHEydOAPDDDz+wfPlyAgMDad++PVu2bLlmTX/3/PPPk5KSQlxcHC4uLgV6citWrMjx48cvO+avbRUrVsTb2/uKbUSk7FLIFJESp3379oSHh/P888/nbxs4cCC9evXi6NGjpKamMmzYMKxW63Wdr0qVKhw9ejT/fXx8fP5rPz8/jh49isViKbC/atWqhXAlV+fn58eRI0fy32dkZHD69OkCn2symfJfBwQE0L59+/ywmpKSQnp6OpMmTQIgNDSUxYsXk5SURO/evenfv/9l57ge1apV45NPPmHkyJFcuHABgLvuuosffvihwHcERg9xQEAAderU4c477yQhIYEdO3bc2BchIqWWQqaIlEjPPPMMERER+QNQzp07h5eXF87Ozmzfvp1vv/32us/Vv39/xo4dy9mzZ0lISGDixIn5+1q0aIGrqysffPABOTk5rFu3jp9++umy5yML28CBA5k+fTo7d+4kKyuLl19+mRYtWhAUFHTF9nfffTcxMTHMmjWLnJwccnJyiIyMJDo6muzsbObMmUNqaioODg6UL18eOzs7wOiFPX36NKmpqdddW+fOnfHz82Pq1KkAPPvss6SlpTFkyBBOnDhBZmYmc+fO5d133+XDDz/EZDJRu3ZtnnzySQYMGMC6devIzs4mMzOTefPm8f777//r70tEbj0KmSJSIlWqVIlBgwbx9ttvA/DFF1/w2muv4e7uzltvvZXfU3c9Xn/9dQIDA6levTpdunTh4Ycfzt/n6OjIkiVLWLFiBRUrVuTJJ5/km2++oV69eoV+TZe68847efvtt+nbty9VqlTh4MGDzJs376rt3d3dWbVqFfPmzcPPzw9fX19efPFFsrKyAJg1axZBQUGUL1+eyZMnM3v2bADq1avHgAEDqFGjBh4eHv84uvwvo0aN4oMPPiArKwtvb29+/fVXMjMzCQ4Oxtvbm48//phZs2Zx//335x/z6aefMmLECIYPH46Hhwc1a9Zk4cKF9OzZ8198UyJyqzJZr/d+k4iIiIjIdVJPpoiIiIgUOoVMERERESl0CpkiIiIiUugUMkVERESk0ClkioiIiEihs7d1ATeqYsWKV51HTkRERESKT1xc3GWrr/3llguZQUFBWlFCREREpAQICQm56j7dLhcRERGRQqeQKSIiIiKFTiFTRERERArdLfdM5pXk5OSQkJBAZmamrUspM5ydnfH398fBwcHWpYiIiEgJVCpCZkJCAu7u7gQFBWEymWxdTqlntVo5ffo0CQkJVK9e3dbliIiISAlUKm6XZ2Zm4u3trYBZTEwmE97e3uo5FhERkasqFSETUMAsZvq+RURE5FpKTci0tdatW99Q+/DwcBYsWHDd7ePi4mjYsOGNllUobrRWEREREYXMQrJ582ZblyAiIiJSYihkFhI3NzcA1q1bR/v27enfvz916tRh9OjRzJkzh+bNm9OoUSMOHjyYf8zq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\n",
      "text/plain": [
       "<Figure size 792x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = MP.subplots(1, 1, figsize=(11, 8), facecolor='white')\n",
    "\n",
    "SB.lineplot(y=tpr_imbal, x=fpr_imbal, ax=axs, label='imbalanced', color=IMBAL_COLOR)\n",
    "SB.scatterplot(y=thresh_tpr_imbal, x=thresh_fpr_imbal, ax=axs, color=IMBAL_COLOR)\n",
    "label_point(thresh_fpr_imbal, thresh_tpr_imbal, thresh_ls, axs, IMBAL_COLOR)\n",
    "\n",
    "# SB.lineplot(y=tpr_under, x=fpr_under, ax=axs, label='undersampled', color=UNDER_COLOR)\n",
    "# SB.scatterplot(y=thresh_tpr_under, x=thresh_fpr_under, ax=axs, color=UNDER_COLOR)\n",
    "# label_point(thresh_fpr_under, thresh_tpr_under, thresh_ls, axs, UNDER_COLOR)\n",
    "\n",
    "SB.lineplot(y=tpr_over, x=fpr_over, ax=axs, label='smote', color=SMOTE_COLOR)\n",
    "SB.scatterplot(y=thresh_tpr_over, x=thresh_fpr_over, ax=axs, color=SMOTE_COLOR)\n",
    "label_point(thresh_fpr_over, thresh_tpr_over, thresh_ls, axs, SMOTE_COLOR)\n",
    "\n",
    "axs.set(title='Random Forest ROC', xlabel='FP Rate', ylabel='TP Rate')\n",
    "\n",
    "MP.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8146288407308184"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.8045575036747503"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.8152260723737397"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# AUC for all balance-types\n",
    "\n",
    "MT.roc_auc_score(y_train, predict_imbal[:, 1])\n",
    "MT.roc_auc_score(y_train, predict_under[:, 1])\n",
    "MT.roc_auc_score(y_train, predict_over[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fine-Tune the Chosen Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# setup the grid-search\n",
    "# not sure for process on grid-search, the best parameters keep changing, as if the default are best\n",
    "\n",
    "SEED = 666\n",
    "sampler = OS.SMOTE(random_state=SEED)\n",
    "scaler = PP.StandardScaler()\n",
    "randforest = ES.RandomForestClassifier(random_state=SEED)\n",
    "pipeline = PL.Pipeline([('sampler', sampler), ('transformer', scaler), ('estimator', randforest)])\n",
    "\n",
    "param_dx = {\n",
    "    'estimator__n_estimators': [120, 140, 160],\n",
    "    'estimator__max_depth': [10, 20, 30],\n",
    "    'estimator__min_impurity_decrease': [0.000001, 0.00001, 0.0001],\n",
    "    }\n",
    "\n",
    "searcher = MS.GridSearchCV(pipeline, param_dx, scoring='accuracy', cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run the grid search\n",
    "\n",
    "%timeit\n",
    "searcher.fit(X_train, y_train);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid Search found the following optimal parameters: \n",
      "estimator__max_depth: 20\n",
      "estimator__min_impurity_decrease: 1e-06\n",
      "estimator__n_estimators: 140\n",
      "\n",
      "Training Accuracy: 99.38%\n",
      "\n",
      "Validation Accuracy: 81.1%\n",
      "\n",
      "Random Guess Accuracy: 74.84%\n"
     ]
    }
   ],
   "source": [
    "# check the best parameters fund by grid search\n",
    "\n",
    "best_parameters = searcher.best_params_\n",
    "\n",
    "print(\"Grid Search found the following optimal parameters: \")\n",
    "for param_name in sorted(best_parameters.keys()):\n",
    "    print(\"%s: %r\" % (param_name, best_parameters[param_name]))\n",
    "\n",
    "train_pred = searcher.predict(X_train)\n",
    "train_accuracy = MT.accuracy_score(y_train, train_pred)\n",
    "test_pred = searcher.predict(X_test)\n",
    "test_accuracy = MT.accuracy_score(y_test, test_pred)\n",
    "\n",
    "print(\"\")\n",
    "print(\"Training Accuracy: {:.4}%\".format(train_accuracy * 100))\n",
    "print(\"\")\n",
    "print(\"Validation Accuracy: {:.4}%\".format(test_accuracy * 100))\n",
    "\n",
    "guess_TP = 0\n",
    "guess_TN = len(y_test[y_test==0])\n",
    "guess_FP = 0\n",
    "guess_FN = len(y_test[y_test==1])\n",
    "\n",
    "print(\"\")\n",
    "print(\"Random Guess Accuracy: {:.4}%\".format( \n",
    "    (guess_TP + guess_TN) / (guess_TP + guess_TN + guess_FP + guess_FN) * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# confusion matrix\n",
    "\n",
    "pcm.plot_confusion_matrix(y_test.astype('int64'),\n",
    "                          test_pred.astype('int64'),\n",
    "                          title=\"Confusion Matrix for Random Forest\",\n",
    "                          classes=NP.array([0,1]))\n",
    "\n",
    "# a bug in the current version of matplotlib shifts the default ylim, and the code below corrects it\n",
    "MP.gca().set_ylim(1.5, -0.5);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(386, 149)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(386,)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# balance the test set for investigation\n",
    "\n",
    "undersampler = US.RandomUnderSampler()\n",
    "X_test_under, y_test_under = undersampler.fit_resample(X_test, y_test)\n",
    "X_test_under.shape\n",
    "y_test_under.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy: 99.38%\n",
      "\n",
      "Validation Accuracy: 73.32%\n",
      "\n",
      "Random Guess Accuracy: 50.0%\n"
     ]
    }
   ],
   "source": [
    "train_pred = searcher.predict(X_train)\n",
    "train_accuracy = MT.accuracy_score(y_train, train_pred)\n",
    "test_pred = searcher.predict(X_test_under)\n",
    "test_accuracy = MT.accuracy_score(y_test_under, test_pred)\n",
    "\n",
    "print(\"\")\n",
    "print(\"Training Accuracy: {:.4}%\".format(train_accuracy * 100))\n",
    "print(\"\")\n",
    "print(\"Validation Accuracy: {:.4}%\".format(test_accuracy * 100))\n",
    "\n",
    "guess_TP = 0\n",
    "guess_TN = len(y_test_under[y_test_under==0])\n",
    "guess_FP = 0\n",
    "guess_FN = len(y_test_under[y_test_under==1])\n",
    "\n",
    "print(\"\")\n",
    "print(\"Random Guess Accuracy: {:.4}%\".format( \n",
    "    (guess_TP + guess_TN) / (guess_TP + guess_TN + guess_FP + guess_FN) * 100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>windows_and_doors_cnt_prts</td>\n",
       "      <td>0.004122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>znap_cnt_prts</td>\n",
       "      <td>0.000189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>supports_girders_and_cranes_tot_prts</td>\n",
       "      <td>0.003137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pneumatics_cnt_prts</td>\n",
       "      <td>0.000789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tools_tot_prts</td>\n",
       "      <td>0.004482</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                feature  importance\n",
       "0            windows_and_doors_cnt_prts    0.004122\n",
       "1                         znap_cnt_prts    0.000189\n",
       "2  supports_girders_and_cranes_tot_prts    0.003137\n",
       "3                   pneumatics_cnt_prts    0.000789\n",
       "4                        tools_tot_prts    0.004482"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149 entries, 0 to 148\n",
      "Data columns (total 2 columns):\n",
      "feature       149 non-null object\n",
      "importance    149 non-null float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 2.4+ KB\n"
     ]
    }
   ],
   "source": [
    "importance_ls = list(searcher.best_estimator_.named_steps['estimator'].feature_importances_)\n",
    "columns_ls = X_train.columns\n",
    "feature_ls = []\n",
    "\n",
    "for idx, ftr in enumerate(columns_ls):\n",
    "    new_dx = {\n",
    "        'feature': ftr,\n",
    "        'importance': importance_ls[idx],\n",
    "    }\n",
    "    feature_ls.append(new_dx)\n",
    "    \n",
    "importance_df = PD.DataFrame(feature_ls)\n",
    "importance_df.head()\n",
    "importance_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>year</td>\n",
       "      <td>0.047528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>wheels_and_tyres_cnt_prts</td>\n",
       "      <td>0.028398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>plates_tot_prts</td>\n",
       "      <td>0.018263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>number_colors</td>\n",
       "      <td>0.017514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>minifig_accessories_tot_prts</td>\n",
       "      <td>0.016950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>minifigs_tot_prts</td>\n",
       "      <td>0.016402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>windscreens_and_fuselage_cnt_prts</td>\n",
       "      <td>0.016314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>wheels_and_tyres_tot_prts</td>\n",
       "      <td>0.016043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>bionicle_hero_factory_and_constraction_tot_prts</td>\n",
       "      <td>0.015703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>bricks_tot_prts</td>\n",
       "      <td>0.015172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            feature  importance\n",
       "85                                             year    0.047528\n",
       "70                        wheels_and_tyres_cnt_prts    0.028398\n",
       "74                                  plates_tot_prts    0.018263\n",
       "84                                    number_colors    0.017514\n",
       "57                     minifig_accessories_tot_prts    0.016950\n",
       "96                                minifigs_tot_prts    0.016402\n",
       "7                 windscreens_and_fuselage_cnt_prts    0.016314\n",
       "18                        wheels_and_tyres_tot_prts    0.016043\n",
       "94  bionicle_hero_factory_and_constraction_tot_prts    0.015703\n",
       "81                                  bricks_tot_prts    0.015172"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importance_df.sort_values('importance', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>mechanical_tot_prts</td>\n",
       "      <td>0.001027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>scolor_1st_Green</td>\n",
       "      <td>0.000981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>belville_scala_and_fabuland_cnt_prts</td>\n",
       "      <td>0.000941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>scolor_2nd_Transparent</td>\n",
       "      <td>0.000852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pneumatics_cnt_prts</td>\n",
       "      <td>0.000789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>belville_scala_and_fabuland_tot_prts</td>\n",
       "      <td>0.000761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>category_Bigfig-Junior</td>\n",
       "      <td>0.000740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>mechanical_cnt_prts</td>\n",
       "      <td>0.000716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>scolor_2nd_Brown</td>\n",
       "      <td>0.000513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>scolor_1st_Transparent</td>\n",
       "      <td>0.000282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>znap_tot_prts</td>\n",
       "      <td>0.000255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>znap_cnt_prts</td>\n",
       "      <td>0.000189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>duplo_quatro_and_primo_cnt_prts</td>\n",
       "      <td>0.000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>clikits_tot_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>ho_scale_cnt_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>duplo_quatro_and_primo_tot_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>clikits_cnt_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>non-buildable_figures_tot_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>ho_scale_tot_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>non-buildable_figures_cnt_prts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  feature  importance\n",
       "38                    mechanical_tot_prts    0.001027\n",
       "134                      scolor_1st_Green    0.000981\n",
       "33   belville_scala_and_fabuland_cnt_prts    0.000941\n",
       "146                scolor_2nd_Transparent    0.000852\n",
       "3                     pneumatics_cnt_prts    0.000789\n",
       "89   belville_scala_and_fabuland_tot_prts    0.000761\n",
       "119                category_Bigfig-Junior    0.000740\n",
       "66                    mechanical_cnt_prts    0.000716\n",
       "141                      scolor_2nd_Brown    0.000513\n",
       "137                scolor_1st_Transparent    0.000282\n",
       "83                          znap_tot_prts    0.000255\n",
       "1                           znap_cnt_prts    0.000189\n",
       "31        duplo_quatro_and_primo_cnt_prts    0.000005\n",
       "115                      clikits_tot_prts    0.000000\n",
       "53                      ho_scale_cnt_prts    0.000000\n",
       "55        duplo_quatro_and_primo_tot_prts    0.000000\n",
       "59                       clikits_cnt_prts    0.000000\n",
       "99         non-buildable_figures_tot_prts    0.000000\n",
       "69                      ho_scale_tot_prts    0.000000\n",
       "72         non-buildable_figures_cnt_prts    0.000000"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importance_df.sort_values('importance', ascending=False).tail(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85                                                year\n",
       "70                           wheels_and_tyres_cnt_prts\n",
       "74                                     plates_tot_prts\n",
       "84                                       number_colors\n",
       "57                        minifig_accessories_tot_prts\n",
       "96                                   minifigs_tot_prts\n",
       "7                    windscreens_and_fuselage_cnt_prts\n",
       "18                           wheels_and_tyres_tot_prts\n",
       "94     bionicle_hero_factory_and_constraction_tot_prts\n",
       "81                                     bricks_tot_prts\n",
       "58                                     plates_cnt_prts\n",
       "122                                category_Lego-Brand\n",
       "75                              bricks_sloped_tot_prts\n",
       "13                                  number_spare_parts\n",
       "138                                   scolor_1st_White\n",
       "90                                   total_spare_parts\n",
       "117                                  minifigs_cnt_prts\n",
       "80                               technic_pins_tot_prts\n",
       "111    bionicle_hero_factory_and_constraction_cnt_prts\n",
       "105                            plates_special_tot_prts\n",
       "48                                      tiles_tot_prts\n",
       "46                    plates_round_and_dishes_tot_prts\n",
       "49                             plates_special_cnt_prts\n",
       "60                        minifig_accessories_cnt_prts\n",
       "93                               technic_pins_cnt_prts\n",
       "6                                      bricks_cnt_prts\n",
       "78                             bricks_special_tot_prts\n",
       "73                              bricks_curved_tot_prts\n",
       "52                              bricks_sloped_cnt_prts\n",
       "98                              technic_axles_cnt_prts\n",
       "110                   bars_ladders_and_fences_tot_prts\n",
       "35                         technic_connectors_tot_prts\n",
       "5                      bricks_round_and_cones_tot_prts\n",
       "25                    plates_round_and_dishes_cnt_prts\n",
       "104                        plants_and_animals_tot_prts\n",
       "42                 hinges_arms_and_turntables_tot_prts\n",
       "37                              tiles_special_tot_prts\n",
       "106                             technic_axles_tot_prts\n",
       "116                     transportation_-_land_cnt_prts\n",
       "129                                    category_Sports\n",
       "Name: feature, dtype: object"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get top 40 features\n",
    "\n",
    "best_features = importance_df.sort_values('importance', ascending=False).head(40)\n",
    "best_features['feature']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
